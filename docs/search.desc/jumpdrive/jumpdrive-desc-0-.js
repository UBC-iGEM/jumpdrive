searchState.loadedDescShard("jumpdrive", 0, "Contains the error value\nContains the error value\nA specialized Error type to represent failures during …\nAn alias for <code>std::io::Error</code>\nAn alias for <code>Result&lt;(), std::io::Error&gt;</code>\nThe internal representation of a Jumpdrive process. <strong>Note</strong>: …\nA specialized Result type for the <code>jumpdrive!</code> macro.\nContains the success value\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe primary entrypoint for Jumpdrive.\nDO NOT manually construct a <code>Jumpdrive</code> instance; instead, …\nA MIME type\nAn <code>application/</code> MIME type\nAn <code>image/</code> MIME type\nA <code>text/</code> MIME type\nAn alias for <code>std::net::TcpStream</code>\nAn alias for <code>tungstenite::WebSocket&lt;std::net::TcpStream&gt;</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGuesses the MIME type of a path based on its extension. …\nGenerates a response with a valid HTTP/1.1 header\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe primary entrypoint for Jumpdrive.\nServes a file at runtime")