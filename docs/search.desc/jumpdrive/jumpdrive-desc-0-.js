searchState.loadedDescShard("jumpdrive", 0, "Failed to connect to an incoming client\nCouldnâ€™t find a matching endpoint ðŸ˜•\nEmpty client request\nContains the error value\nA specialized Error type to represent failures during â€¦\nAn alias for <code>std::io::Error</code>\nThe internal representation of a Jumpdrive process. <strong>Note</strong>: â€¦\nA specialized Result type for the <code>jumpdrive!</code> macro.\nMalformed client request\nContains the success value\nFailed to read a clientâ€™s request\nFailed while serving a custom endpoint\nFailed Websocket handshake\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe primary entrypoint for Jumpdrive.\nDO NOT manually construct a <code>Jumpdrive</code> instance; instead, â€¦\nA MIME type\nAn <code>application/</code> MIME type\nAn <code>image/</code> MIME type\nA <code>text/</code> MIME type\nContains the error value\nAn alias for <code>Result&lt;(), E&gt;</code> where <code>E</code> is <code>std::io::Error</code>\nContains the success value\nAn alias for <code>std::net::TcpStream</code>\nAn alias for <code>tungstenite::WebSocket&lt;std::net::TcpStream&gt;</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGuesses the MIME type of a path based on its extension. â€¦\nGenerates a response with a valid HTTP/1.1 header\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe primary entrypoint for Jumpdrive.\nServes a file at runtime")