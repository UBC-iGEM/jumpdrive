(function() {
    var type_impls = Object.fromEntries([["jumpdrive",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-WebSocket%3CStream%3E\" class=\"impl\"><a href=\"#impl-Debug-for-WebSocket%3CStream%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Stream&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for WebSocket&lt;Stream&gt;<div class=\"where\">where\n    Stream: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.89.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","jumpdrive::prelude::Websocket"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WebSocket%3CStream%3E\" class=\"impl\"><a href=\"#impl-WebSocket%3CStream%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Stream&gt; WebSocket&lt;Stream&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_socket\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_raw_socket</a>(\n    stream: Stream,\n    role: Role,\n    config: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;WebSocketConfig&gt;,\n) -&gt; WebSocket&lt;Stream&gt;</h4></section></summary><div class=\"docblock\"><p>Convert a raw socket into a WebSocket without performing a handshake.</p>\n<p>Call this function if you’re using Tungstenite as a part of a web framework\nor together with an existing one. If you need an initial handshake, use\n<code>connect()</code> or <code>accept()</code> functions of the crate to construct a websocket.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if config is invalid e.g. <code>max_write_buffer_size &lt;= write_buffer_size</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_partially_read\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_partially_read</a>(\n    stream: Stream,\n    part: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.89.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.u8.html\">u8</a>&gt;,\n    role: Role,\n    config: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;WebSocketConfig&gt;,\n) -&gt; WebSocket&lt;Stream&gt;</h4></section></summary><div class=\"docblock\"><p>Convert a raw socket into a WebSocket without performing a handshake.</p>\n<p>Call this function if you’re using Tungstenite as a part of a web framework\nor together with an existing one. If you need an initial handshake, use\n<code>connect()</code> or <code>accept()</code> functions of the crate to construct a websocket.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if config is invalid e.g. <code>max_write_buffer_size &lt;= write_buffer_size</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_ref\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;Stream</a></h4></section></summary><div class=\"docblock\"><p>Returns a shared reference to the inner stream.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.reference.html\">&amp;mut Stream</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the inner stream.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_config\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_config</a>(&amp;mut self, set_func: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;mut WebSocketConfig))</h4></section></summary><div class=\"docblock\"><p>Change the configuration.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if config is invalid e.g. <code>max_write_buffer_size &lt;= write_buffer_size</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_config\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_config</a>(&amp;self) -&gt; &amp;WebSocketConfig</h4></section></summary><div class=\"docblock\"><p>Read the configuration.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.can_read\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">can_read</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Check if it is possible to read messages.</p>\n<p>Reading is impossible after receiving <code>Message::Close</code>. It is still possible after\nsending close frame since the peer still may send some data before confirming close.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.can_write\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">can_write</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Check if it is possible to write messages.</p>\n<p>Writing gets impossible immediately after sending or receiving <code>Message::Close</code>.</p>\n</div></details></div></details>",0,"jumpdrive::prelude::Websocket"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WebSocket%3CStream%3E\" class=\"impl\"><a href=\"#impl-WebSocket%3CStream%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Stream&gt; WebSocket&lt;Stream&gt;<div class=\"where\">where\n    Stream: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.89.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">read</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Message, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Read a message from stream, if possible.</p>\n<p>This will also queue responses to ping and close messages. These responses\nwill be written and flushed on the next call to <a href=\"Self::read\"><code>read</code></a>,\n<a href=\"Self::write\"><code>write</code></a> or <a href=\"Self::flush\"><code>flush</code></a>.</p>\n<h5 id=\"closing-the-connection\"><a class=\"doc-anchor\" href=\"#closing-the-connection\">§</a>Closing the connection</h5>\n<p>When the remote endpoint decides to close the connection this will return\nthe close message with an optional close frame.</p>\n<p>You should continue calling <a href=\"Self::read\"><code>read</code></a>, <a href=\"Self::write\"><code>write</code></a> or\n<a href=\"Self::flush\"><code>flush</code></a> to drive the reply to the close frame until [<code>Error::ConnectionClosed</code>]\nis returned. Once that happens it is safe to drop the underlying connection.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.send\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">send</a>(&amp;mut self, message: Message) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Writes and immediately flushes a message.\nEquivalent to calling <a href=\"Self::write\"><code>write</code></a> then <a href=\"Self::flush\"><code>flush</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">write</a>(&amp;mut self, message: Message) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Write a message to the provided stream, if possible.</p>\n<p>A subsequent call should be made to <a href=\"Self::flush\"><code>flush</code></a> to flush writes.</p>\n<p>In the event of stream write failure the message frame will be stored\nin the write buffer and will try again on the next call to <a href=\"Self::write\"><code>write</code></a>\nor <a href=\"Self::flush\"><code>flush</code></a>.</p>\n<p>If the write buffer would exceed the configured [<code>WebSocketConfig::max_write_buffer_size</code>]\n<a href=\"Error::WriteBufferFull\"><code>Err(WriteBufferFull(msg_frame))</code></a> is returned.</p>\n<p>This call will generally not flush. However, if there are queued automatic messages\nthey will be written and eagerly flushed.</p>\n<p>For example, upon receiving ping messages tungstenite queues pong replies automatically.\nThe next call to <a href=\"Self::read\"><code>read</code></a>, <a href=\"Self::write\"><code>write</code></a> or <a href=\"Self::flush\"><code>flush</code></a>\nwill write &amp; flush the pong reply. This means you should not respond to ping frames manually.</p>\n<p>You can however send pong frames manually in order to indicate a unidirectional heartbeat\nas described in <a href=\"https://tools.ietf.org/html/rfc6455#section-5.5.3\">RFC 6455</a>. Note that\nif <a href=\"Self::read\"><code>read</code></a> returns a ping, you should <a href=\"Self::flush\"><code>flush</code></a> before passing\na custom pong to <a href=\"Self::write\"><code>write</code></a>, otherwise the automatic queued response to the\nping will not be sent as it will be replaced by your custom pong message.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<ul>\n<li>If the WebSocket’s write buffer is full, [<code>Error::WriteBufferFull</code>] will be returned\nalong with the equivalent passed message frame.</li>\n<li>If the connection is closed and should be dropped, this will return [<code>Error::ConnectionClosed</code>].</li>\n<li>If you try again after [<code>Error::ConnectionClosed</code>] was returned either from here or from\n<a href=\"Self::read\"><code>read</code></a>, [<code>Error::AlreadyClosed</code>] will be returned. This indicates a program\nerror on your part.</li>\n<li>[<code>Error::Io</code>] is returned if the underlying connection returns an error\n(consider these fatal except for WouldBlock).</li>\n<li>[<code>Error::Capacity</code>] if your message size is bigger than the configured max message size.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Flush writes.</p>\n<p>Ensures all messages previously passed to <a href=\"Self::write\"><code>write</code></a> and automatic\nqueued pong responses are written &amp; flushed into the underlying stream.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.close\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">close</a>(&amp;mut self, code: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;CloseFrame&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Close the connection.</p>\n<p>This function guarantees that the close frame will be queued.\nThere is no need to call it again. Calling this function is\nthe same as calling <code>write(Message::Close(..))</code>.</p>\n<p>After queuing the close frame you should continue calling <a href=\"Self::read\"><code>read</code></a> or\n<a href=\"Self::flush\"><code>flush</code></a> to drive the close handshake to completion.</p>\n<p>The websocket RFC defines that the underlying connection should be closed\nby the server. Tungstenite takes care of this asymmetry for you.</p>\n<p>When the close handshake is finished (we have both sent and received\na close message), <a href=\"Self::read\"><code>read</code></a> or <a href=\"Self::flush\"><code>flush</code></a> will return\n[Error::ConnectionClosed] if this endpoint is the server.</p>\n<p>If this endpoint is a client, [Error::ConnectionClosed] will only be\nreturned after the server has closed the underlying connection.</p>\n<p>It is thus safe to drop the underlying connection as soon as [Error::ConnectionClosed]\nis returned from <a href=\"Self::read\"><code>read</code></a> or <a href=\"Self::flush\"><code>flush</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_message\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">read_message</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Message, Error&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: Use <code>read</code></span></div></span></summary><div class=\"docblock\"><p>Old name for <a href=\"Self::read\"><code>read</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_message\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">write_message</a>(&amp;mut self, message: Message) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: Use <code>send</code></span></div></span></summary><div class=\"docblock\"><p>Old name for <a href=\"Self::send\"><code>send</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_pending\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">write_pending</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.89.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.89.0/std/primitive.unit.html\">()</a>, Error&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: Use <code>flush</code></span></div></span></summary><div class=\"docblock\"><p>Old name for <a href=\"Self::flush\"><code>flush</code></a>.</p>\n</div></details></div></details>",0,"jumpdrive::prelude::Websocket"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[17547]}